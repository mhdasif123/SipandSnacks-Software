{"ast":null,"code":"import { storage } from './types';\n\n// Utility functions to access historical data\nexport const getHistoricalData = () => {\n  const orders = storage.getOrders();\n  const employees = storage.getEmployees();\n  const teaItems = storage.getTeaItems();\n  const snackItems = storage.getSnackItems();\n  return {\n    orders,\n    employees,\n    teaItems,\n    snackItems,\n    totalOrders: orders.length,\n    totalRevenue: orders.reduce((sum, order) => sum + order.amount, 0),\n    uniqueDates: [...new Set(orders.map(order => order.orderDate))].sort().reverse(),\n    ordersByDate: orders.reduce((acc, order) => {\n      if (!acc[order.orderDate]) {\n        acc[order.orderDate] = [];\n      }\n      acc[order.orderDate].push(order);\n      return acc;\n    }, {}),\n    ordersByEmployee: orders.reduce((acc, order) => {\n      if (!acc[order.employeeName]) {\n        acc[order.employeeName] = [];\n      }\n      acc[order.employeeName].push(order);\n      return acc;\n    }, {})\n  };\n};\n\n// Get data for a specific date range\nexport const getDataForDateRange = (fromDate, toDate) => {\n  const orders = storage.getOrders();\n  const from = new Date(fromDate);\n  const to = new Date(toDate);\n  return orders.filter(order => {\n    const orderDate = new Date(order.orderDate);\n    return orderDate >= from && orderDate <= to;\n  });\n};\n\n// Get data for a specific employee\nexport const getDataForEmployee = employeeName => {\n  const orders = storage.getOrders();\n  return orders.filter(order => order.employeeName === employeeName);\n};\n\n// Get data for a specific date\nexport const getDataForDate = date => {\n  const orders = storage.getOrders();\n  return orders.filter(order => order.orderDate === date);\n};\n\n// Export all data as JSON\nexport const exportAllDataAsJSON = () => {\n  const data = getHistoricalData();\n  const jsonString = JSON.stringify(data, null, 2);\n\n  // Create and download file\n  const blob = new Blob([jsonString], {\n    type: 'application/json'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = `sip-and-snacks-data-${new Date().toISOString().split('T')[0]}.json`;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};\n\n// Get summary statistics\nexport const getSummaryStats = () => {\n  const data = getHistoricalData();\n  return {\n    totalDays: data.uniqueDates.length,\n    totalOrders: data.totalOrders,\n    totalRevenue: data.totalRevenue,\n    averageOrderValue: data.totalOrders > 0 ? data.totalRevenue / data.totalOrders : 0,\n    averageOrdersPerDay: data.uniqueDates.length > 0 ? data.totalOrders / data.uniqueDates.length : 0,\n    mostPopularTea: getMostPopularItem(data.orders, 'tea'),\n    mostPopularSnack: getMostPopularItem(data.orders, 'snack'),\n    mostActiveEmployee: getMostActiveEmployee(data.ordersByEmployee)\n  };\n};\nconst getMostPopularItem = (orders, itemType) => {\n  const counts = {};\n  orders.forEach(order => {\n    counts[order[itemType]] = (counts[order[itemType]] || 0) + 1;\n  });\n  return Object.entries(counts).reduce((a, b) => counts[a[0]] > counts[b[0]] ? a : b, ['', 0]);\n};\nconst getMostActiveEmployee = ordersByEmployee => {\n  const employeeCounts = Object.entries(ordersByEmployee).map(([name, orders]) => ({\n    name,\n    count: orders.length,\n    totalAmount: orders.reduce((sum, order) => sum + order.amount, 0)\n  }));\n  return employeeCounts.reduce((a, b) => a.count > b.count ? a : b, {\n    name: '',\n    count: 0,\n    totalAmount: 0\n  });\n};","map":{"version":3,"names":["storage","getHistoricalData","orders","getOrders","employees","getEmployees","teaItems","getTeaItems","snackItems","getSnackItems","totalOrders","length","totalRevenue","reduce","sum","order","amount","uniqueDates","Set","map","orderDate","sort","reverse","ordersByDate","acc","push","ordersByEmployee","employeeName","getDataForDateRange","fromDate","toDate","from","Date","to","filter","getDataForEmployee","getDataForDate","date","exportAllDataAsJSON","data","jsonString","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","toISOString","split","body","appendChild","click","removeChild","revokeObjectURL","getSummaryStats","totalDays","averageOrderValue","averageOrdersPerDay","mostPopularTea","getMostPopularItem","mostPopularSnack","mostActiveEmployee","getMostActiveEmployee","itemType","counts","forEach","Object","entries","a","b","employeeCounts","name","count","totalAmount"],"sources":["D:/My_Projects/SipandSnacks/src/utils/dataUtils.ts"],"sourcesContent":["import { storage } from './types';\r\n\r\n// Utility functions to access historical data\r\nexport const getHistoricalData = () => {\r\n  const orders = storage.getOrders();\r\n  const employees = storage.getEmployees();\r\n  const teaItems = storage.getTeaItems();\r\n  const snackItems = storage.getSnackItems();\r\n\r\n  return {\r\n    orders,\r\n    employees,\r\n    teaItems,\r\n    snackItems,\r\n    totalOrders: orders.length,\r\n    totalRevenue: orders.reduce((sum, order) => sum + order.amount, 0),\r\n    uniqueDates: [...new Set(orders.map(order => order.orderDate))].sort().reverse(),\r\n    ordersByDate: orders.reduce((acc, order) => {\r\n      if (!acc[order.orderDate]) {\r\n        acc[order.orderDate] = [];\r\n      }\r\n      acc[order.orderDate].push(order);\r\n      return acc;\r\n    }, {} as {[key: string]: any[]}),\r\n    ordersByEmployee: orders.reduce((acc, order) => {\r\n      if (!acc[order.employeeName]) {\r\n        acc[order.employeeName] = [];\r\n      }\r\n      acc[order.employeeName].push(order);\r\n      return acc;\r\n    }, {} as {[key: string]: any[]})\r\n  };\r\n};\r\n\r\n// Get data for a specific date range\r\nexport const getDataForDateRange = (fromDate: string, toDate: string) => {\r\n  const orders = storage.getOrders();\r\n  const from = new Date(fromDate);\r\n  const to = new Date(toDate);\r\n  \r\n  return orders.filter(order => {\r\n    const orderDate = new Date(order.orderDate);\r\n    return orderDate >= from && orderDate <= to;\r\n  });\r\n};\r\n\r\n// Get data for a specific employee\r\nexport const getDataForEmployee = (employeeName: string) => {\r\n  const orders = storage.getOrders();\r\n  return orders.filter(order => order.employeeName === employeeName);\r\n};\r\n\r\n// Get data for a specific date\r\nexport const getDataForDate = (date: string) => {\r\n  const orders = storage.getOrders();\r\n  return orders.filter(order => order.orderDate === date);\r\n};\r\n\r\n// Export all data as JSON\r\nexport const exportAllDataAsJSON = () => {\r\n  const data = getHistoricalData();\r\n  const jsonString = JSON.stringify(data, null, 2);\r\n  \r\n  // Create and download file\r\n  const blob = new Blob([jsonString], { type: 'application/json' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  link.download = `sip-and-snacks-data-${new Date().toISOString().split('T')[0]}.json`;\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n};\r\n\r\n// Get summary statistics\r\nexport const getSummaryStats = () => {\r\n  const data = getHistoricalData();\r\n  \r\n  return {\r\n    totalDays: data.uniqueDates.length,\r\n    totalOrders: data.totalOrders,\r\n    totalRevenue: data.totalRevenue,\r\n    averageOrderValue: data.totalOrders > 0 ? data.totalRevenue / data.totalOrders : 0,\r\n    averageOrdersPerDay: data.uniqueDates.length > 0 ? data.totalOrders / data.uniqueDates.length : 0,\r\n    mostPopularTea: getMostPopularItem(data.orders, 'tea'),\r\n    mostPopularSnack: getMostPopularItem(data.orders, 'snack'),\r\n    mostActiveEmployee: getMostActiveEmployee(data.ordersByEmployee)\r\n  };\r\n};\r\n\r\nconst getMostPopularItem = (orders: any[], itemType: 'tea' | 'snack') => {\r\n  const counts: {[key: string]: number} = {};\r\n  orders.forEach(order => {\r\n    counts[order[itemType]] = (counts[order[itemType]] || 0) + 1;\r\n  });\r\n  \r\n  return Object.entries(counts).reduce((a, b) => counts[a[0]] > counts[b[0]] ? a : b, ['', 0]);\r\n};\r\n\r\nconst getMostActiveEmployee = (ordersByEmployee: {[key: string]: any[]}) => {\r\n  const employeeCounts = Object.entries(ordersByEmployee).map(([name, orders]) => ({\r\n    name,\r\n    count: orders.length,\r\n    totalAmount: orders.reduce((sum, order) => sum + order.amount, 0)\r\n  }));\r\n  \r\n  return employeeCounts.reduce((a, b) => a.count > b.count ? a : b, { name: '', count: 0, totalAmount: 0 });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}